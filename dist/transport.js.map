{"version":3,"file":"transport.js","sourceRoot":"","sources":["../src/transport.ts"],"names":[],"mappings":";;;AAAA,2DAAuC;AACvC,mDAAsD;AAatD;IAA6C,2CAAe;IAY1D,yBAAmB,IAA6B;QAAhD,YACE,kBAAM,IAAI,CAAC,SAIZ;QAhBM,YAAM,GAAG,KAAK,CAAC;QAEd,eAAS,GAAG;YAClB,KAAK,EAAE,MAAM,CAAC,QAAQ,CAAC,KAAK;YAC5B,OAAO,EAAE,MAAM,CAAC,QAAQ,CAAC,KAAK;YAC9B,IAAI,EAAE,MAAM,CAAC,QAAQ,CAAC,IAAI;YAC1B,KAAK,EAAE,MAAM,CAAC,QAAQ,CAAC,KAAK;YAC5B,IAAI,EAAE,MAAM,CAAC,QAAQ,CAAC,OAAO;YAC7B,KAAK,EAAE,MAAM,CAAC,QAAQ,CAAC,KAAK;SAC7B,CAAC;QAKA,KAAI,CAAC,MAAM,GAAG,IAAI,IAAI,IAAI,CAAC,MAAM,IAAI,KAAK,CAAC;QAC3C,MAAM,CAAC,IAAI,CAAC,KAAI,CAAC,YAAY,CAAC,IAAI,IAAI,IAAI,CAAC,MAAM,IAAI,EAAE,CAAC,CAAC,CAAC;;IAC5D,CAAC;IAEM,6BAAG,GAAV,UAAW,IAAU,EAAE,QAAoB;QAA3C,iBA2CC;QA1CC,YAAY,CAAC;YACX,KAAI,CAAC,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAC;QAC5B,CAAC,CAAC,CAAC;QAEH,IAAI,IAAI,CAAC,MAAM;YAAE,OAAO,QAAQ,EAAE,CAAC;QAE3B,IAAA,sBAAO,EAAE,yBAAmB,EAAE,gBAAI,EAAE,yDAAO,CAAU;QAE7D,IAAM,WAAW,GAAI,IAAI,CAAC,SAAiB,CAAC,YAAY,CAAC,CAAC;QAE1D,MAAM,CAAC,cAAc,CAAC,UAAA,KAAK;YACzB,IAAI,IAAI,KAAK,SAAS,IAAI,KAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE;gBAC7C,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;aACrB;YAED,KAAK,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;YAEtB,yBAAyB;YACzB,oEAAoE;YAEpE,yBAAyB;YACzB,mFAAmF;YAEnF,iBAAiB;QACnB,CAAC,CAAC,CAAC;QAEH,wBAAwB;QACxB,yBAAyB;QACzB,8BAA8B;QAC9B,WAAW;QACX,MAAM;QAEN,gCAAgC;QAChC,IAAI,IAAI,CAAC,kBAAkB,CAAC,WAAW,CAAC,EAAE;YACxC,MAAM,CAAC,gBAAgB,CAAC,IAAI,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC;YAE5C,OAAO,QAAQ,EAAE,CAAC;SACnB;QAED,qBAAqB;QACrB,MAAM,CAAC,cAAc,CAAC,OAAO,EAAE,WAAW,CAAC,CAAC;QAC5C,OAAO,QAAQ,EAAE,CAAC;IACpB,CAAC;IAED,sBAAW,mCAAM;aAAjB;YACE,OAAO,MAAM,CAAC;QAChB,CAAC;;;OAAA;IAEO,sCAAY,GAApB,UAAqB,OAA2B;QAC9C,0BACE,GAAG,EAAE,OAAO,IAAI,OAAO,CAAC,GAAG,IAAI,OAAO,CAAC,GAAG,CAAC,UAAU,IAAI,EAAE,EAC3D,UAAU,EAAE,OAAO,IAAI,OAAO,CAAC,UAAU,IAAI,+BAA+B,EAC5E,WAAW,EAAE,OAAO,IAAI,OAAO,CAAC,WAAW,IAAI,OAAO,CAAC,GAAG,CAAC,kBAAkB,IAAI,OAAO,CAAC,GAAG,CAAC,QAAQ,IAAI,YAAY,EACrH,KAAK,EAAE,OAAO,IAAI,OAAO,CAAC,KAAK,IAAI,CAAC,CAAC,OAAO,CAAC,GAAG,CAAC,YAAY,IAAI,KAAK,EACtE,UAAU,EAAE,OAAO,IAAI,OAAO,CAAC,UAAU,IAAI,GAAG,EAChD,cAAc,EAAE,OAAO,IAAI,OAAO,CAAC,cAAc,IAAI,GAAG,IACrD,OAAO,EACV;IACJ,CAAC;IAED,uCAAuC;IACvC,mDAAmD;IACnD,IAAI;IAEI,kCAAQ,GAAhB,UAAkB,GAAQ;QACxB,IAAM,IAAI,GAAG,OAAO,GAAG,CAAC;QACxB,OAAO,IAAI,KAAK,UAAU,IAAI,IAAI,KAAK,QAAQ,IAAI,CAAC,CAAC,GAAG,CAAC;IAC3D,CAAC;IAEO,4CAAkB,GAA1B,UAA2B,KAAsB;QAC/C,OAAO,KAAK,KAAK,MAAM,CAAC,QAAQ,CAAC,KAAK,IAAI,KAAK,KAAK,MAAM,CAAC,QAAQ,CAAC,KAAK,CAAC;IAC5E,CAAC;IACH,sBAAC;AAAD,CAAC,AA5FD,CAA6C,eAAe,GA4F3D;;AAAA,CAAC","sourcesContent":["import * as Sentry from '@sentry/node';\nimport TransportStream = require(\"winston-transport\");\n\ninterface Info {\n  message: string;\n  level: string;\n  tags?: {[key: string]: any};\n  [key: string]: any;\n}\n\nexport interface SentryTransportOptions extends TransportStream.TransportStreamOptions {\n  sentry?: Sentry.NodeOptions;\n}\n\nexport default class SentryTransport extends TransportStream {\n  public silent = false;\n\n  private levelsMap = {\n    silly: Sentry.Severity.Debug,\n    verbose: Sentry.Severity.Debug,\n    info: Sentry.Severity.Info,\n    debug: Sentry.Severity.Debug,\n    warn: Sentry.Severity.Warning,\n    error: Sentry.Severity.Error\n  };\n\n  public constructor(opts?: SentryTransportOptions) {\n    super(opts);\n\n    this.silent = opts && opts.silent || false;\n    Sentry.init(this.withDefaults(opts && opts.sentry || {}));\n  }\n\n  public log(info: Info, callback: () => void) {\n    setImmediate(() => {\n      this.emit('logged', info);\n    });\n\n    if (this.silent) return callback();\n\n    const { message, level: winstonLevel, tags, ...meta } = info;\n\n    const sentryLevel = (this.levelsMap as any)[winstonLevel];\n\n    Sentry.configureScope(scope => {\n      if (tags !== undefined && this.isObject(tags)) {\n        scope.setTags(tags);\n      }\n\n      scope.setExtras(meta);\n\n      // TODO: add user details\n      // scope.setUser({ id: '4711' }); // id, email, username, ip_address\n\n      // TODO: add fingerprints\n      // scope.setFingerprint(['{{ default }}', path]); // fingerprint should be an array\n\n      // scope.clear();\n    });\n\n    // TODO: add breadcrumbs\n    // Sentry.addBreadcrumb({\n    //   message: 'My Breadcrumb',\n    //   // ...\n    // });\n\n    // Capturing Errors / Exceptions\n    if (this.shouldLogException(sentryLevel)) {\n      Sentry.captureException(new Error(message));\n\n      return callback();\n    }\n\n    // Capturing Messages\n    Sentry.captureMessage(message, sentryLevel);\n    return callback();\n  }\n\n  public get sentry() {\n    return Sentry;\n  }\n\n  private withDefaults(options: Sentry.NodeOptions) {\n    return {\n      dsn: options && options.dsn || process.env.SENTRY_DSN || '',\n      serverName: options && options.serverName || 'winston-transport-sentry-node',\n      environment: options && options.environment || process.env.SENTRY_ENVIRONMENT || process.env.NODE_ENV || 'production',\n      debug: options && options.debug || !!process.env.SENTRY_DEBUG || false,\n      sampleRate: options && options.sampleRate || 1.0,\n      maxBreadcrumbs: options && options.maxBreadcrumbs || 100,\n      ...options\n    };\n  }\n\n  // private normalizeMessage(msg: any) {\n  //   return msg && msg.message ? msg.message : msg;\n  // }\n\n  private isObject (obj: any) {\n    const type = typeof obj;\n    return type === 'function' || type === 'object' && !!obj;\n  }\n\n  private shouldLogException(level: Sentry.Severity) {\n    return level === Sentry.Severity.Fatal || level === Sentry.Severity.Error;\n  }\n};\n"]}